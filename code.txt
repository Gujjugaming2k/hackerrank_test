# Step 1: Install and import required packages
!pip3 install test_wine_quality-0.1-py3-none-any.whl

import pandas as pd
import numpy as np
import sklearn
import matplotlib.pyplot as plt
import seaborn
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.metrics import f1_score
from test_wine_quality import test_quality

# Step 2: Load the dataset
data = pd.read_csv("winequality-red.csv")

# Step 3: Descriptive analysis (optional but recommended)
print(data.info())
print(data.describe())

# Step 4: Feature Engineering
data['Quality'] = data['quality'].apply(lambda x: 'Poor' if x < 5 else 'Good')

# Step 5: Average alcohol value in poor quality wine
q1 = data[data['Quality'] == 'Poor']['alcohol'].mean()

# Step 6: Replace 'Quality' values with binary
data['Quality'] = data['Quality'].map({'Poor': 0, 'Good': 1})

# Step 7: Define independent and dependent variables
X = data.drop(['quality', 'Quality'], axis=1)
y = data['Quality']

# Step 8: Scaling
scaler = MinMaxScaler()
X_Scaled = scaler.fit_transform(X)

# Step 9: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_Scaled, y, test_size=0.2, random_state=42)

# Step 10: Build the Sequential model
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

# Step 11: Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Step 12: Fit the model
model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=1)

# Step 13: Predict and evaluate
predictions = (model.predict(X_test) > 0.5).astype(int).flatten().tolist()
assert f1_score(y_test, predictions) > 0.70

# Step 14: Save your answers
test_quality.save_answer(q1, data, X_train, X_test, y_train, y_test, model, predictions)
